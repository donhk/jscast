// http://www.vogella.com/tutorials/Gradle/article.html
// https://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/

String sep = File.separator
String location = project.projectDir
String jarName = 'cmanager'
String releaseDir = 'build/jscast/'

group 'jscast'
version '1.0'

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
sourceCompatibility = 1.8


sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir "resources"
        }
    }

    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir "resources"
        }
    }
}

//Get dependencies from Maven central repository
repositories {
    mavenCentral()
}

//Project dependencies
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    compile group: 'com.sun.jersey', name: 'jersey-client', version: '1.8'
    compile group: 'com.sun.jersey', name: 'jersey-json', version: '1.8'
    compile group: 'io.reactivex', name: 'rxjava', version: '1.2.10'
    compile fileTree(dir: './src/main/libs', include: ['*.jar'])
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                'Implementation-Version': version,
                'Main-Class': 'jscast.boot.Boot'
    }
}

task cleanFolder(type: Delete) {
    delete "jscast"
}

//noinspection GroovyAssignabilityCheck
task myRun(type: JavaExec) {
    dependsOn classes
    delete "logs"
    systemProperty "java.library.path", 'src/main/libs'
    classpath = sourceSets.main.runtimeClasspath
    main = "jscast.boot.Boot"
}

clean {
    dependsOn cleanFolder
}

task copyRuntimeLibs(type: Copy) {
    into releaseDir + "libs"
    from configurations.runtime
}

task copyNative(type: Copy) {
    into releaseDir + "native"
    from "src/main/libs"
    exclude { details -> details.file.name.endsWith('.jar') }
}

task copyLatestJar(type: Copy) {
    into releaseDir + "bin"
    from "build/libs"
}

task wrappers() {
    doLast {
        new File(releaseDir + "bin/jscast").text = """
# Buildtime
java -Djava.library.path=../native/ -classpath ../libs/*:${jarName}-${version}.jar jscast.boot.Boot
"""
        new File(releaseDir + "bin/jscast.cmd").text = """
@echo off
rem Buildtime
java -Djava.library.path=../native/ -classpath ../libs/*;${jarName}-${version}.jar jscast.boot.Boot
"""
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task createTree() {
    //create final structure
    def file = new File(releaseDir + "libs")
    file.mkdirs()
    file = new File(releaseDir + "bin")
    file.mkdirs()
    file = new File(releaseDir + "logs")
    file.mkdirs()
    file = new File(releaseDir + "native")
    file.mkdirs()
}

//create project folder with compiled sources
task release() {
    description 'Dist the final product'
    dependsOn build, jar, createTree, copyRuntimeLibs, copyLatestJar, copyNative, wrappers
}

//test section
test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    // listen to events in the test execution lifecycle
    beforeTest {
        descriptor -> logger.lifecycle("Running test: ${descriptor}")
    }

    filter {
        //specific test method
        includeTestsMatching "*FrameServerTest*"
    }
}


